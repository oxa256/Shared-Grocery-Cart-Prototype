from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QPushButton, QLineEdit, QComboBox, QScrollArea, QMessageBox
)
from PySide6.QtCore import Qt
import sys

class SharedGroceriesCart(QMainWindow):
    def _init_(self):
        super()._init_()
        self.setWindowTitle("SSH Shared Groceries Cart")
        self.setGeometry(100, 100, 900, 700)

        # List to store student names
        self.students = []
        self.selected_student = None

        # Dictionary to store products in the cart
        self.cart = {}

        # List of products with name and price
        self.products = [
            {"name": "ü•õ Milk", "price": 3.5},
            {"name": "üçû Bread", "price": 2.0},
            {"name": "ü•ö Eggs", "price": 2.5},
            {"name": "üßÄ Cheese", "price": 4.0},
        ]
        self.delivery_fee = 5.0  # Fixed delivery fee

        self.initUI()

    def initUI(self):
        """Set up the user interface components."""
        # This function sets up the layout, widgets, and buttons.
        # Use a combination of QVBoxLayout and QHBoxLayout to arrange the UI components.
        # Add labels, buttons, input fields, and other necessary widgets.

        #central
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        # Layouts
        main_layout = QVBoxLayout(self.central_widget)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # Title
        title = QLabel("-SSH Shared Groceries Cart-", alignment=Qt.AlignCenter)
        title.setStyleSheet("font-size: 26px; font-weight: bold; color: #5DADE2; margin-bottom: 20px;")
        main_layout.addWidget(title)


        # Payment and Reset Buttons
        payment_layout = QHBoxLayout()

        pay_whole_btn = QPushButton("Pay for Everyone üí≥")
        pay_whole_btn.setStyleSheet("background-color: #5DADE2; color: white; padding: 10px; border-radius: 5px;")
        pay_whole_btn.clicked.connect(self.pay_whole_cart)

        pay_individual_btn = QPushButton("Pay Individually üßæ")
        pay_individual_btn.setStyleSheet("background-color: #85C1E9; color: white; padding: 10px; border-radius: 5px;")
        pay_individual_btn.clicked.connect(self.pay_individual)

    


        reset_cart_btn = QPushButton("Resert Cart üîÑ")
        reset_cart_btn.setStyleSheet("background-color: #E74C3C; color: white; padding: 10px; border-radius: 5px;")
        reset_cart_btn.clicked.connect(self.reset_cart)


        payment_layout.addWidget(pay_whole_btn)
        payment_layout.addWidget(pay_individual_btn)
        payment_layout.addWidget(reset_cart_btn)


        main_layout.addLayout(payment_layout)








    def add_student(self):
        """Add a new student to the cart."""
        # This function should allow the user to add a student name.
        # Ensure the name is unique before adding it.
        # Use QMessageBox for warnings if needed.

    def select_student(self, index):
        """Update the selected student based on the dropdown selection."""
        # This function should update the currently selected student
        # based on the dropdown menu's selected index.
        # Handle the case when no student is selected (index = 0).

    def add_product(self, product):
        """Add a selected product to the current student's cart."""
        # This function should add the product to the selected student's cart.
        # If the product already exists in the cart, increase the quantity.
        # Otherwise, add it as a new item.

    def remove_product(self, product_name):
        """Remove a product from the cart for the selected student."""
        # This function should handle removing a product from the cart.
        # Check if the selected student has added that product before removing it.

    def update_cart_display(self):
        """Update the cart display with the current state of the cart."""
        # This function should update the UI with the latest items in the cart.
        # Clear the existing cart items in the layout before re-adding them.

    def pay_whole_cart(self):
        """Calculate and display the total cost for everyone."""
        # This function should calculate the grand total for all students' products
        # and include the delivery fee. Display the total using QMessageBox.

    def pay_individual(self):
        """Calculate and display the total cost per student."""
        # This function should calculate the total amount each student owes based on their contributions.
        # Display the breakdown of payments using QMessageBox.

    def reset_cart(self):
        """Reset the cart to its initial state."""
    self.cart = {}
    self.selected_student = None
    self.student_dropdown.setCurrentIndex(0)
    self.update_cart_display()

    QMessageBox.information(self, "Cart reset")

       

# Main execution
if _name_ == "_main_":
    app = QApplication(sys.argv)
    window = SharedGroceriesCart()
    window.show()
    sys.exit(app.exec())
